==============================
========= Queries ============ 
==============================

--Normal Query
select * from notice;
select notice_content from notice where notice_nr = ;

--Create Table
create table payment (
	paymentid serial primary key,
	memberid VARCHAR(50) NOT NULL,
	orderid VARCHAR(50) NOT NULL,
	payment_date timestamp, 
	payment_ownername VARCHAR(50),
	payment_art integer,
	payment_deposit numeric
);

-- Add Column
ALTER TABLE payment
ADD COLUMN payment_state integer;

-- Add Column with reference
ALTER TABLE payment
ADD COLUMN "fk_column_name" integer REFERENCES "table_name";

-- change Column name
ALTER TABLE table_name
  RENAME COLUMN old_name TO new_name;

-- Insert data
INSERT INTO payment (memberid, orderid, payment_deposit) VALUES ('m', '20190526220452', 42000);

-- Update table
UPDATE payment SET payment_ownername = null, payment_state = 1 WHERE orderid='20190526220452' and memberid='m' ;

-- Drop table column
ALTER TABLE "table_name" DROP COLUMN "column_name";

-- Drop table column and all of its associated objects(fk)
ALTER TABLE "table_name" DROP COLUMN "column_name" CASCADE;

-- Delete table all rows
DELETE FROM "table_name";

-- Delete table rows with condition
DELETE FROM "table_name" WHERE ;

-- Delete(drop) total Table
drop table "table_name";

==============================
========== History ===========
==============================

getProductsCommonInfo : SELECT prod.pd_shopurl, prod.pd_trackingtitle, prod.pd_trackingnumber, oState.ship_state, oState.ship_price, 
                        oState.box_actual_weight, oState.box_volume_weight, oState.ship_price_discount
                        FROM ((PRODUCT prod INNER JOIN ORDERSTATE oState ON prod.orderid = oState.orderid and prod.memberid="m" and prod.orderid="20190526220452") 
                        INNER JOIN PAYMENT paymt ON oState.fk_payment = paymt.paymentid and oState.orderid = "20190526220452"
                        
willPayDeliveryFee : WITH t AS ( UPDATE PAYMENT SET payment_ownername = ?, payment_state = ? WHERE memberid = ? AND orderid = ?) 
                     UPDATE orderstate SET ship_state = ? WHERE memberid = ? AND orderid = ?
                     
create table favorite_address (
    id serial primary key,
    userid VARCHAR(50) NOT NULL,
    name_kor VARCHAR(50) NOT NULL,
    name_eng VARCHAR(50),
    transit_nr VARCHAR(50),
    phonenumber_first VARCHAR(50),
    phonenumber_second VARCHAR(50),
    zip_code VARCHAR(10),
    address text,
);


drop table customer;

create table customer (
    id serial primary key,
    userid VARCHAR(50) NOT NULL,
    name_kor VARCHAR(50) NOT NULL,
    name_eng VARCHAR(50),
    email text,
    transit_nr VARCHAR(50),
    phonenumber_first VARCHAR(50),
    phonenumber_second VARCHAR(50),
    zip_code VARCHAR(10),
    address text,
);

drop table recipient;
    
create table recipient (
    id serial primary key,
    userid VARCHAR(50) NOT NULL,
    orderid VARCHAR(50) NOT NULL,
    name_kor VARCHAR(50) NOT NULL,
    name_eng VARCHAR(50),
    transit_nr VARCHAR(50),
    phonenumber_first VARCHAR(50),
    phonenumber_second VARCHAR(50),
    zip_code VARCHAR(10),
    address text,
    usercomment text
);


ALTER TABLE orderstate
ADD COLUMN order_date Date;

ALTER TABLE orderstate DROP COLUMN fk_payment;

DELETE FROM payment;

ALTER TABLE payment
ADD COLUMN fk_orderstate integer REFERENCES orderstate;

ALTER TABLE payment
  RENAME COLUMN memberid TO userid;
  
UPDATE orderstate SET order_date = '2019-12-25' WHERE orderid = '20190526192259';

ALTER TABLE orderstate DROP COLUMN pay_state;

create table notices (
    noticeid serial primary key,
    notice_title VARCHAR(50) NOT NULL,
    notice_content text NOT NULL,
    notice_date date, 
);	

INSERT INTO notices (notice_title, notice_content, notice_date) VALUES ('GKoo 테스트 런칭', '배송대행 및 구매대행 신청이 테스트 진행중입니다', '2020-01-11');

DELETE FROM notice;
drop table notice;

create table question_answer (
    qnaid serial primary key,
    question_title VARCHAR(50) NOT NULL,
    question_content text NOT NULL,
    question_date date NOT NULL,
    answer_content text,
    answer_state answer_state,
    answer_date date,
    userid VARCHAR(50)  NOT NULL
);

-- Enum Type
CREATE TYPE answer_state AS ENUM('READY_TO_ANSWER', 'COMPLETE_ANSWER');


ALTER TABLE question_answer
ADD COLUMN userid String;


CREATE TABLE buying_service
(
    object_id serial primary key,
    userid character varying(50) NOT NULL,
    orderid character varying(50) NOT NULL,
    buying_price numeric,
    payment_state integer,
    ship_state integer,
    ship_price numeric,
    box_actual_weight numeric,
    box_volume_weight numeric,
    tracking_company_kor character varying(50),
    tracking_company_world character varying(50), 
    trackingnr_kor character varying(50),
    trackingnr_world character varying(50) ,
    shop_url character varying(50) ,
)

CREATE TABLE buying_service_recipient
(
	object_id serial primary key,
    name_kor VARCHAR(50) NOT NULL,
    name_eng VARCHAR(50),
    transit_nr VARCHAR(50),
    phonenumber_first VARCHAR(50),
    phonenumber_second VARCHAR(50),
    zip_code VARCHAR(10),
    address text,
    usercomment text,
    fk_buying_service integer REFERENCES buying_service
)

create table buying_service_payment (
    object_id serial primary key,
    buying_deposit_payment numeric,
    shipping_deposit_payment numeric,
    buying_payment_date date,
    shipping_payment_date date,  
    buying_deposit_ownername VARCHAR(50),
    shipping_deposit_ownername VARCHAR(50),
    payment_art integer,
    buying_service_payment_state integer,
    fk_buying_service integer REFERENCES buying_service
);

create table buying_service_product (
    object_id serial primary key,
    pd_categorytitle VARCHAR(50),
    pd_itemtitle VARCHAR(50),
    pd_brandname VARCHAR(50),
    pd_itemname VARCHAR(50),
    pd_amount integer,
    pd_price numeric,
    pd_totalprice numeric,
    fk_buying_service integer REFERENCES buying_service
);